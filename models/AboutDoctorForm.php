<?php
/**
 * Created by PhpStorm.
 * User: Joanna
 * Date: 29.08.2017
 * Time: 15:28
 */

namespace app\models;


use Psr\Log\NullLogger;
use yii\base\Model;

class AboutDoctorForm extends Model
{
    public $diseaseNames;
    public $universityNames;
    public $dateOfGraduation;
    public $categories;
    public $profilePhotoName;
    public $name;
    public $lastName;
    public $degree;
    public $certificatePhotoNames;
    public $description;
    private $userId;
    private $doctor;
    private $doctorId;


    public function rules()
    {

        return [

            'diseaseNamesPattern' => ['diseaseNames', 'each', 'rule' => ['pattern' => '/^[a-z\s]+$/']],
            'universityNamesPattern' => ['universityNames', 'each', 'rule' => ['pattern' => '/^[a-z\s]+$/']],
            'dateOfGraduationPattern' => ['dateOfGraduation', 'each', 'rule' => ['pattern' => '/^[a-z\s]+$/']],
            'profilePhoto' => ['string'],
            'name' => ['string'],
            'lastName' => ['string'],
            'degree' => ['string'],
            'certificatePhotoNames' => ['string'],
            'description' => ['string'],
        ];
    }

    public function attributeLabels()
    {
        return [
            'diseaseNames' => 'Choroba',
            'universityNames' => 'Ukończone szkoły',
            'dateOfGraduation' => "Data ukończenia szkoły",
            'photo' => 'zdjęcie',
            'name' => 'imie',
            'lastName' => 'nazwisko',
            'degree' => 'stopień naukowy',
            'certificatePhotoNames' => 'certyfikat',
            'description' => 'opis',
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->userId = \Yii::$app->user->getId();
        $this->doctor = Doctor::find()->where(['user_id' => $this->userId])->one();
        $this->doctorId = $this->doctor->id;
    }

    public function saveDiseases()
    {

        for ($x = 0; $x < count($this->diseaseNames); $x++) {
            $disease = new Disease();
            $disease->name = $this->diseaseNames[$x];
            $disease->doctor_id = $this->doctorId;
            $disease->save();
        }
        return true;
    }

    public function saveUniversities()
    {

        for ($i = 0; $i < count($this->universityNames); $i++) {
            $university = new University();
            $university->name = $this->universityNames[$i];
            $university->date_of_graduation = $this->dateOfGraduation[$i];
            $university->id_doctor = $this->doctorId;
            $university->save();
        }

        return true;
    }

    public function deleteData()
    {

        University::deleteAll(['id_doctor' => $this->doctorId]);
        Disease::deleteAll(['doctor_id' => $this->doctorId]);

        return true;
    }

    public function saveProfilePhoto()
    {

        ProfilePhoto::deleteAll(['doctor_id' => $this->doctorId]);
        $profilePhoto = new ProfilePhoto();
        $profilePhoto->name = $this->profilePhotoName;
        $profilePhoto->doctor_id = $this->doctorId;
        $profilePhoto->save();

        return true;
    }

    public function saveCategories()
    {

        $this->doctor->main_category_id = $this->categories[0];
        $this->doctor->save();

        DoctorCategory::deleteAll(['doctor_id' => $this->doctorId]);
        $doctorCategory = new DoctorCategory();
        $doctorCategory->doctor_id = $this->doctorId;
        $doctorCategory->main_category_id = $this->categories[1];
        $doctorCategory->save();

        $doctorCategory = new DoctorCategory();
        $doctorCategory->doctor_id = $this->doctorId;
        $doctorCategory->main_category_id = $this->categories[2];
        $doctorCategory->save();

        return true;
    }

    public function saveUserDetails()
    {

        UserDetails::deleteAll(['user_id' => $this->userId]);

        $userDetails = new UserDetails();
        $userDetails->user_id = $this->userId;
        $userDetails->name = $this->name;
        $userDetails->last_name = $this->lastName;
        $userDetails->role = "lekarz";
        $userDetails->save();

        return true;
    }

    public function saveDegree()
    {
        if ($this->degree == null) {
            $this->doctor->degree_id = NULL;
        } else {
            $this->doctor->degree_id = $this->degree;
        }
        $this->doctor->save();
    }

    public function saveDescription()
    {
        $description = Description::find()->where(["doctor_id" => $this->doctorId]);

        $descriptionOne = $description->one();

        if ($description->exists()) { //jeśli istnieje
            if ($this->description != '1') {
                $descriptionOne->content = $this->description;
            } else {
                $descriptionOne->content = null;
            }
            $descriptionOne->save();
        } else {
            if ($this->description != '1') {
                $descriptionModel = new Description();
                $descriptionModel->doctor_id = $this->doctorId;
                $descriptionModel->content = $this->description;
                $descriptionModel->save();
            }
        }
    }


    public function saveCertificates()
    {

        for ($x = 0; $x < count($this->certificatePhotoNames); $x++) {
            $certificate = new CertificatePhoto();
            $certificate->doctor_id = $this->doctorId;
            $certificate->name = $this->certificatePhotoNames[$x];
            $certificate->save();
        }
        return true;
    }

    public function deleteCertificate($certificatesToDelete)
    {

        foreach ($certificatesToDelete as $cert)
            CertificatePhoto::deleteAll(['name' => $cert]); //dodaćwarunek że id liekarza wynosi ...
        return true;
    }
}